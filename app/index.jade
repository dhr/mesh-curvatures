doctype html
html
  head
    meta(charset='utf-8')
    meta(http-equiv='X-UA-Compatible', content='IE=edge')
    title Mesh Curvatures
    meta(name='description', content='')
    meta(name='viewport', content='width=device-width, initial-scale=1')

    style(type='text/css')
      :stylus
        html, body
          margin: 0px
          width: 100%
          height: 100%
          overflow: scroll
          font-family: Helvetica
          color: #999

        #instructions
          position: fixed
          bottom: 0
          left: 0
          margin: 20px
            
          .instr
            display: inline-block

            & + .instr
              margin-left: 40px

        #sidebar
          position: fixed
          top: 0
          right: 0
          width: 150px
          margin: 20px

          & div
            padding: 10px
            z-index: 10
            background-color: #444

          div + div
            margin-top: 20px

          #controls
            label
              display: inline-block
              font-size: 9pt

            select, input
              display: block
              width: 100%

            * + label
              margin-top: 10px

          #info
            table
              width: 100%
              border-collapse: collapse

            td:first-child
              font-weight: bold
              text-align: center
              width: 35px
              background-color: #555

            pre
              text-align: right

  body
    #instructions
      .instr Arrow Keys - Move light (controls spherical coordinates)
      .instr R - Reset light position and object rotation
      .instr Shift+R - Reset only light position

    #sidebar
      #controls
        label Mesh
        select#meshSelector

      #info
        table
          tr
            td ùúÖ<sub>1</sub>
            td: pre#k1val
          tr
            td ùúÖ<sub>2</sub>
            td: pre#k2val 
          tr
            td f
            td: pre#fval
          tr
            td g
            td: pre#gval
          tr
            td h
            td: pre#hval
          tr
            td i
            td: pre#ival

    script(src='three.min.js')
    script(src='TrackballControls.js')
    script(src='OrbitControls.js')

    script(id='vertShader' type='x-shader/x-vertex').
      attribute vec3 pdir;
      attribute vec2 curvs;
      attribute vec4 dcurvs;

      varying vec3 transformedNormal;
      varying float k;
      varying float dkmag;

      void main()
      {
        transformedNormal = normalMatrix*normal;
        k = curvs.x*curvs.y;
        vec4 abscurvs = abs(dcurvs);
        dkmag = max(max(abscurvs.x, abscurvs.y), max(abscurvs.z, abscurvs.w));
        gl_Position = projectionMatrix*modelViewMatrix*vec4(position, 1.0);
      }

    script(id='fragShader' type='x-shader/x-fragment').
      uniform vec3 directionalLightDirection[MAX_DIR_LIGHTS];

      uniform float maxK;
      uniform float curvSat;
      uniform float maxDCurv;
      uniform float dcurvSat;
      uniform float dcurvBoost;
      uniform float lightingAmt;

      varying vec3 transformedNormal;
      varying float k;
      varying float dkmag;

      void main()
      {
        float nDotV = 1.0;
        for (int i = 0; i < MAX_DIR_LIGHTS; i++) {
          vec3 lightVector = normalize(directionalLightDirection[i]);
          vec3 normal = normalize(transformedNormal);
          nDotV = clamp(dot(normal, lightVector), 0.0, 1.0);
        }
        float knorm = curvSat*k/maxK/2.0;
        float dknorm = pow(dkmag/maxDCurv, 1.0 - dcurvBoost*0.9)*dcurvSat/2.0;

        float shading = 1.0 - lightingAmt*(1.0 - nDotV);
        vec3 color = shading*vec3(0.5 + knorm, 0.5 + dknorm, 0.5 - knorm);
        gl_FragColor = vec4(color, 1.0);
      }

    script
      :coffee
        scene = new THREE.Scene()
        
        aspect = window.innerWidth/window.innerHeight
        camera = new THREE.PerspectiveCamera 20.5, aspect, 0.1, 1000
        camera.position.z = 7
        
        renderer = new THREE.WebGLRenderer()
        renderer.setSize window.innerWidth, window.innerHeight
        document.body.appendChild renderer.domElement

        render = ->
          renderer.render scene, camera

        controls = new THREE.TrackballControls camera, renderer.domElement
        controls.dampingFactor = 0.01
        controls.addEventListener 'change', render

        material = new THREE.ShaderMaterial
          uniforms: THREE.UniformsUtils.merge [
            THREE.UniformsLib['lights']
            maxK: type: 'f', value: 0
            maxDCurv: type: 'f', value: 0
            lightingAmt:
              type: 'f', label: 'Lighting', range: [0, 1], value: 0.5
            curvSat:
              type: 'f', label: 'Curvature', range: [0, 1], value: 1
            dcurvSat:
              type: 'f', label: 'Third Order', range: [0, 1], value: 1
            dcurvBoost:
              type: 'f', label: 'Third Order Boost', range: [0, 1], value: 0
          ]
          lights: true
          attributes:
            pdir: {type: 'v3'}
            curvs: {type: 'v2'}
            dcurvs: {type: 'v4'}
          vertexShader: document.getElementById('vertShader').textContent,
          fragmentShader: document.getElementById('fragShader').textContent

        for id, p of material.uniforms
          if 'label' of p
            newLabel = document.createElement 'label'
            newLabel.setAttribute 'for', id
            newLabel.innerHTML = p.label
            newSlider = document.createElement 'input'
            newSlider.setAttribute 'id', id
            newSlider.setAttribute 'type', 'range'
            newSlider.setAttribute 'value', p.value
            newSlider.setAttribute 'min', p.range[0]
            newSlider.setAttribute 'max', p.range[1]
            newSlider.setAttribute 'step', 0.01
            document.getElementById('controls').appendChild newLabel
            document.getElementById('controls').appendChild newSlider

        meshSelector = document.getElementById('meshSelector')
        meshes = ['blob01', 'blob06', 'blob07', 'lump000', 'lump001', 'lump002']
        for meshName in meshes
          option = document.createElement 'option'
          option.innerHTML = meshName
          meshSelector.appendChild option

        mesh = new THREE.Mesh new THREE.IcosahedronGeometry(0.2),
          new THREE.MeshBasicMaterial wireframe: true
        scene.add mesh

        light = new THREE.DirectionalLight 0xffffff, 0.5
        lightTheta = 0
        lightPhi = 0
        lightAngleInc = Math.PI/2/30
        setLightPosition = (theta, phi) ->
          x = Math.sin(theta)*Math.cos(phi)
          y = Math.sin(phi)
          z = Math.cos(theta)*Math.cos(phi)
          light.position.set x, y, z
        setLightPosition lightTheta, lightPhi
        scene.add light

        loader = new THREE.BufferGeometryLoader()
        loadMesh = ->
          loader.load "meshes/#{meshSelector.value}.json", (geometry) ->
            curvs = geometry.attributes.curvs
            maxK = -1/0
            for i in [0 ... curvs.length] by curvs.itemSize
              [k1, k2] = curvs.array.subarray i, i + 2
              maxK = Math.max maxK, Math.abs k1*k2
            material.uniforms.maxK.value = maxK

            dcurvs = geometry.attributes.dcurvs
            maxDCurv = -1/0
            for i in [0 ... dcurvs.length] by dcurvs.itemSize
              [f, g, h, i] = dcurvs.array.subarray(i, i + 4)
              maxDCurv = Math.max maxDCurv, f, g, h, i, -f, -g, -h, -i
            material.uniforms.maxDCurv.value = maxDCurv

            scene.remove mesh
            mesh.geometry = geometry
            mesh.material = material
            scene.add mesh

            controls.reset()
            render()

        animate = ->
          window.requestAnimationFrame animate
          for id, p of material.uniforms
            if 'label' of p
              p.value = +document.getElementById(id).value

          controls.update()
          render()

        loadMesh()
        animate()

        meshSelector.addEventListener 'change', loadMesh

        vecConstructors = [0, 0, THREE.Vector2, THREE.Vector3, THREE.Vector4]
        getAttributeVec = (geometry, attrName, index) ->
          attr = geometry.getAttribute(attrName)
          vec = new vecConstructors[attr.itemSize]()
          [start, end] = [attr.itemSize*index, attr.itemSize*(index + 1)]
          vec.fromArray attr.array.subarray(start, end)

        findClosestVertexIndex = (g, f, p) ->
          dista = getAttributeVec(g, 'position', f.a).distanceToSquared(p)
          distb = getAttributeVec(g, 'position', f.b).distanceToSquared(p)
          distc = getAttributeVec(g, 'position', f.c).distanceToSquared(p)

          index = f.a
          index = f.b if distb < dista
          index = f.c if distc < dista && distc < distb
          index

        k1val = document.getElementById 'k1val'
        k2val = document.getElementById 'k2val'
        fval = document.getElementById 'fval'
        gval = document.getElementById 'gval'
        hval = document.getElementById 'hval'
        ival = document.getElementById 'ival'
        clearCurvatureDisplay = ->
          k1val.innerHTML = ' '
          k2val.innerHTML = ' '
          fval.innerHTML = ' '
          gval.innerHTML = ' '
          hval.innerHTML = ' '
          ival.innerHTML = ' '
        clearCurvatureDisplay()

        zeroVec = new THREE.Vector3()
        arrowLen = 0.1
        pdir1Arrow = new THREE.ArrowHelper zeroVec, zeroVec, arrowLen, 0xff0000
        pdir2Arrow = new THREE.ArrowHelper zeroVec, zeroVec, arrowLen, 0x00ff00
        normalArrow = new THREE.ArrowHelper zeroVec, zeroVec, arrowLen, 0x0000ff

        pdir1Arrow.setLength arrowLen, 0.2*arrowLen, 0.2*arrowLen
        pdir2Arrow.setLength arrowLen, 0.2*arrowLen, 0.2*arrowLen
        normalArrow.setLength arrowLen, 0.2*arrowLen, 0.2*arrowLen

        pdir1Arrow.line.material.linewidth = 3
        pdir2Arrow.line.material.linewidth = 3
        normalArrow.line.material.linewidth = 3

        showArrows = (tf) ->
          pdir1Arrow.visible = tf
          pdir2Arrow.visible = tf
          normalArrow.visible = tf
        showArrows false

        scene.add pdir1Arrow
        scene.add pdir2Arrow
        scene.add normalArrow

        raycaster = new THREE.Raycaster()
        window.addEventListener 'mousemove', (event) ->
          x = 2*event.clientX/window.innerWidth - 1;
          y = -2*event.clientY/window.innerHeight + 1;
          dir = new THREE.Vector3(x, y, 1).unproject(camera)
          dir.sub(camera.position).normalize()

          raycaster.set camera.position, dir
          intxns = raycaster.intersectObject mesh
          if intxns.length > 0
            [face, point] = [intxns[0].face, intxns[0].point]
            index = findClosestVertexIndex mesh.geometry, face, point

            curvs = getAttributeVec mesh.geometry, 'curvs', index
            [k1val.innerHTML, k2val.innerHTML] =
              curvs.toArray().map (n) -> n.toFixed(6)
            dcurvs = getAttributeVec mesh.geometry, 'dcurvs', index
            [fval.innerHTML, gval.innerHTML, hval.innerHTML, ival.innerHTML] =
              dcurvs.toArray().map (n) -> n.toFixed(6)

            pdir1 = getAttributeVec mesh.geometry, 'pdir', index
            normal = getAttributeVec mesh.geometry, 'normal', index
            pdir2 = normal.clone().cross pdir1

            vertex = getAttributeVec mesh.geometry, 'position', index
            arrowPos = normal.clone().multiplyScalar(0.001).add vertex
            pdir1Arrow.position.copy arrowPos
            pdir2Arrow.position.copy arrowPos
            normalArrow.position.copy arrowPos

            pdir1Arrow.setDirection pdir1
            normalArrow.setDirection normal
            pdir2Arrow.setDirection pdir2

            showArrows true
          else
            clearCurvatureDisplay()
            showArrows false

        window.addEventListener 'resize', ->
          camera.aspect = window.innerWidth/window.innerHeight
          camera.updateProjectionMatrix()

          renderer.setSize window.innerWidth, window.innerHeight
          controls.handleResize()

        window.addEventListener 'keydown', (event) ->
          event.preventDefault()
          if event.keyCode == 39 # Right Arrow
            lightTheta = Math.min lightTheta + lightAngleInc, Math.PI/2
          if event.keyCode == 37 # Left Arrow
            lightTheta = Math.max lightTheta - lightAngleInc, -Math.PI/2
          if event.keyCode == 38 # Up Arrow
            lightPhi = Math.min lightPhi + lightAngleInc, Math.PI/2
          if event.keyCode == 40 # Down Arrow
            lightPhi = Math.max lightPhi - lightAngleInc, -Math.PI/2
          setLightPosition lightTheta, lightPhi

        window.addEventListener 'keyup', (event) ->
          if event.keyCode == 82 # r
            lightTheta = 0
            lightPhi = 0
            setLightPosition lightTheta, lightPhi
            if not event.shiftKey
              controls.reset()
